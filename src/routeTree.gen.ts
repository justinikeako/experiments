/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TargetPracticeRouteImport } from './routes/target-practice'
import { Route as SquirclesRouteImport } from './routes/squircles'
import { Route as SpringRouteImport } from './routes/spring'
import { Route as ScrollyTellingRouteImport } from './routes/scrolly-telling'
import { Route as MenuRouteImport } from './routes/menu'
import { Route as IosTimeRouteImport } from './routes/ios-time'
import { Route as ChromaticAbberationIThinkRouteImport } from './routes/chromatic-abberation-i-think'
import { Route as BlobRouteImport } from './routes/blob'
import { Route as BiggestRouteImport } from './routes/biggest'
import { Route as IndexRouteImport } from './routes/index'

const TargetPracticeRoute = TargetPracticeRouteImport.update({
  id: '/target-practice',
  path: '/target-practice',
  getParentRoute: () => rootRouteImport,
} as any)
const SquirclesRoute = SquirclesRouteImport.update({
  id: '/squircles',
  path: '/squircles',
  getParentRoute: () => rootRouteImport,
} as any)
const SpringRoute = SpringRouteImport.update({
  id: '/spring',
  path: '/spring',
  getParentRoute: () => rootRouteImport,
} as any)
const ScrollyTellingRoute = ScrollyTellingRouteImport.update({
  id: '/scrolly-telling',
  path: '/scrolly-telling',
  getParentRoute: () => rootRouteImport,
} as any)
const MenuRoute = MenuRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => rootRouteImport,
} as any)
const IosTimeRoute = IosTimeRouteImport.update({
  id: '/ios-time',
  path: '/ios-time',
  getParentRoute: () => rootRouteImport,
} as any)
const ChromaticAbberationIThinkRoute =
  ChromaticAbberationIThinkRouteImport.update({
    id: '/chromatic-abberation-i-think',
    path: '/chromatic-abberation-i-think',
    getParentRoute: () => rootRouteImport,
  } as any)
const BlobRoute = BlobRouteImport.update({
  id: '/blob',
  path: '/blob',
  getParentRoute: () => rootRouteImport,
} as any)
const BiggestRoute = BiggestRouteImport.update({
  id: '/biggest',
  path: '/biggest',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/biggest': typeof BiggestRoute
  '/blob': typeof BlobRoute
  '/chromatic-abberation-i-think': typeof ChromaticAbberationIThinkRoute
  '/ios-time': typeof IosTimeRoute
  '/menu': typeof MenuRoute
  '/scrolly-telling': typeof ScrollyTellingRoute
  '/spring': typeof SpringRoute
  '/squircles': typeof SquirclesRoute
  '/target-practice': typeof TargetPracticeRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/biggest': typeof BiggestRoute
  '/blob': typeof BlobRoute
  '/chromatic-abberation-i-think': typeof ChromaticAbberationIThinkRoute
  '/ios-time': typeof IosTimeRoute
  '/menu': typeof MenuRoute
  '/scrolly-telling': typeof ScrollyTellingRoute
  '/spring': typeof SpringRoute
  '/squircles': typeof SquirclesRoute
  '/target-practice': typeof TargetPracticeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/biggest': typeof BiggestRoute
  '/blob': typeof BlobRoute
  '/chromatic-abberation-i-think': typeof ChromaticAbberationIThinkRoute
  '/ios-time': typeof IosTimeRoute
  '/menu': typeof MenuRoute
  '/scrolly-telling': typeof ScrollyTellingRoute
  '/spring': typeof SpringRoute
  '/squircles': typeof SquirclesRoute
  '/target-practice': typeof TargetPracticeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/biggest'
    | '/blob'
    | '/chromatic-abberation-i-think'
    | '/ios-time'
    | '/menu'
    | '/scrolly-telling'
    | '/spring'
    | '/squircles'
    | '/target-practice'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/biggest'
    | '/blob'
    | '/chromatic-abberation-i-think'
    | '/ios-time'
    | '/menu'
    | '/scrolly-telling'
    | '/spring'
    | '/squircles'
    | '/target-practice'
  id:
    | '__root__'
    | '/'
    | '/biggest'
    | '/blob'
    | '/chromatic-abberation-i-think'
    | '/ios-time'
    | '/menu'
    | '/scrolly-telling'
    | '/spring'
    | '/squircles'
    | '/target-practice'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BiggestRoute: typeof BiggestRoute
  BlobRoute: typeof BlobRoute
  ChromaticAbberationIThinkRoute: typeof ChromaticAbberationIThinkRoute
  IosTimeRoute: typeof IosTimeRoute
  MenuRoute: typeof MenuRoute
  ScrollyTellingRoute: typeof ScrollyTellingRoute
  SpringRoute: typeof SpringRoute
  SquirclesRoute: typeof SquirclesRoute
  TargetPracticeRoute: typeof TargetPracticeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/target-practice': {
      id: '/target-practice'
      path: '/target-practice'
      fullPath: '/target-practice'
      preLoaderRoute: typeof TargetPracticeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/squircles': {
      id: '/squircles'
      path: '/squircles'
      fullPath: '/squircles'
      preLoaderRoute: typeof SquirclesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/spring': {
      id: '/spring'
      path: '/spring'
      fullPath: '/spring'
      preLoaderRoute: typeof SpringRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scrolly-telling': {
      id: '/scrolly-telling'
      path: '/scrolly-telling'
      fullPath: '/scrolly-telling'
      preLoaderRoute: typeof ScrollyTellingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menu': {
      id: '/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ios-time': {
      id: '/ios-time'
      path: '/ios-time'
      fullPath: '/ios-time'
      preLoaderRoute: typeof IosTimeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chromatic-abberation-i-think': {
      id: '/chromatic-abberation-i-think'
      path: '/chromatic-abberation-i-think'
      fullPath: '/chromatic-abberation-i-think'
      preLoaderRoute: typeof ChromaticAbberationIThinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blob': {
      id: '/blob'
      path: '/blob'
      fullPath: '/blob'
      preLoaderRoute: typeof BlobRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/biggest': {
      id: '/biggest'
      path: '/biggest'
      fullPath: '/biggest'
      preLoaderRoute: typeof BiggestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BiggestRoute: BiggestRoute,
  BlobRoute: BlobRoute,
  ChromaticAbberationIThinkRoute: ChromaticAbberationIThinkRoute,
  IosTimeRoute: IosTimeRoute,
  MenuRoute: MenuRoute,
  ScrollyTellingRoute: ScrollyTellingRoute,
  SpringRoute: SpringRoute,
  SquirclesRoute: SquirclesRoute,
  TargetPracticeRoute: TargetPracticeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
